// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_v_mix_0_0_AXIvideo2MultiPixStr (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        srcLayer0_V_val_0_V_din,
        srcLayer0_V_val_0_V_full_n,
        srcLayer0_V_val_0_V_write,
        srcLayer0_V_val_1_V_din,
        srcLayer0_V_val_1_V_full_n,
        srcLayer0_V_val_1_V_write,
        srcLayer0_V_val_2_V_din,
        srcLayer0_V_val_2_V_full_n,
        srcLayer0_V_val_2_V_write,
        p_read,
        HwReg_height,
        HwReg_width
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] srcLayer0_V_val_0_V_din;
input   srcLayer0_V_val_0_V_full_n;
output   srcLayer0_V_val_0_V_write;
output  [7:0] srcLayer0_V_val_1_V_din;
input   srcLayer0_V_val_1_V_full_n;
output   srcLayer0_V_val_1_V_write;
output  [7:0] srcLayer0_V_val_2_V_din;
input   srcLayer0_V_val_2_V_full_n;
output   srcLayer0_V_val_2_V_write;
input   p_read;
input  [15:0] HwReg_height;
input  [15:0] HwReg_width;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] s_axis_video_V_data_V_0_data_out;
wire    s_axis_video_V_data_V_0_vld_in;
wire    s_axis_video_V_data_V_0_vld_out;
wire    s_axis_video_V_data_V_0_ack_in;
reg    s_axis_video_V_data_V_0_ack_out;
reg   [23:0] s_axis_video_V_data_V_0_payload_A;
reg   [23:0] s_axis_video_V_data_V_0_payload_B;
reg    s_axis_video_V_data_V_0_sel_rd;
reg    s_axis_video_V_data_V_0_sel_wr;
wire    s_axis_video_V_data_V_0_sel;
wire    s_axis_video_V_data_V_0_load_A;
wire    s_axis_video_V_data_V_0_load_B;
reg   [1:0] s_axis_video_V_data_V_0_state;
wire    s_axis_video_V_data_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_user_V_0_data_out;
wire    s_axis_video_V_user_V_0_vld_in;
wire    s_axis_video_V_user_V_0_vld_out;
wire    s_axis_video_V_user_V_0_ack_in;
reg    s_axis_video_V_user_V_0_ack_out;
reg   [0:0] s_axis_video_V_user_V_0_payload_A;
reg   [0:0] s_axis_video_V_user_V_0_payload_B;
reg    s_axis_video_V_user_V_0_sel_rd;
reg    s_axis_video_V_user_V_0_sel_wr;
wire    s_axis_video_V_user_V_0_sel;
wire    s_axis_video_V_user_V_0_load_A;
wire    s_axis_video_V_user_V_0_load_B;
reg   [1:0] s_axis_video_V_user_V_0_state;
wire    s_axis_video_V_user_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_last_V_0_data_out;
wire    s_axis_video_V_last_V_0_vld_in;
wire    s_axis_video_V_last_V_0_vld_out;
wire    s_axis_video_V_last_V_0_ack_in;
reg    s_axis_video_V_last_V_0_ack_out;
reg   [0:0] s_axis_video_V_last_V_0_payload_A;
reg   [0:0] s_axis_video_V_last_V_0_payload_B;
reg    s_axis_video_V_last_V_0_sel_rd;
reg    s_axis_video_V_last_V_0_sel_wr;
wire    s_axis_video_V_last_V_0_sel;
wire    s_axis_video_V_last_V_0_load_A;
wire    s_axis_video_V_last_V_0_load_B;
reg   [1:0] s_axis_video_V_last_V_0_state;
wire    s_axis_video_V_last_V_0_state_cmp_full;
wire    s_axis_video_V_dest_V_0_vld_in;
reg    s_axis_video_V_dest_V_0_ack_out;
reg   [1:0] s_axis_video_V_dest_V_0_state;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] exitcond8_i_fu_326_p2;
wire   [0:0] brmerge_i_fu_340_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] ap_phi_mux_eol_2_i_phi_fu_277_p4;
reg    srcLayer0_V_val_0_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond8_i_reg_428;
reg    srcLayer0_V_val_1_V_blk_n;
reg    srcLayer0_V_val_2_V_blk_n;
reg   [0:0] eol_reg_180;
reg   [23:0] axi_data_V_1_i_reg_191;
reg   [0:0] eol_i_reg_202;
reg   [15:0] j_i_reg_214;
reg   [0:0] axi_last_V_2_i_reg_225;
reg   [23:0] p_Val2_s_reg_238;
reg    ap_block_state1;
wire   [0:0] p_read_1_read_fu_112_p2;
wire    ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_294_ap_ready;
wire    grp_reg_unsigned_short_s_fu_294_ap_done;
wire    grp_reg_unsigned_short_s_fu_300_ap_ready;
wire    grp_reg_unsigned_short_s_fu_300_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [15:0] grp_reg_unsigned_short_s_fu_294_ap_return;
reg   [15:0] tmp_i_reg_389;
wire   [15:0] grp_reg_unsigned_short_s_fu_300_ap_return;
reg   [15:0] tmp_i_114_reg_394;
reg   [23:0] tmp_data_V_reg_399;
reg   [0:0] tmp_last_V_reg_407;
wire   [0:0] exitcond7_i_fu_315_p2;
wire    ap_CS_fsm_state5;
wire   [15:0] i_fu_320_p2;
reg   [15:0] i_reg_423;
reg    ap_predicate_op60_read_state6;
reg    ap_block_state6_pp1_stage0_iter0;
wire    srcLayer0_V_val_0_V1_status;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] j_fu_331_p2;
reg   [7:0] tmp_val_0_V_reg_441;
wire   [7:0] tmp_val_1_V_fu_356_p1;
reg   [7:0] tmp_val_1_V_reg_446;
reg   [7:0] tmp_val_2_V_reg_451;
reg    ap_block_state9;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    grp_reg_unsigned_short_s_fu_294_ap_start;
wire    grp_reg_unsigned_short_s_fu_294_ap_idle;
wire    grp_reg_unsigned_short_s_fu_300_ap_start;
wire    grp_reg_unsigned_short_s_fu_300_ap_idle;
reg   [0:0] axi_last_V_3_i_reg_250;
reg   [0:0] axi_last_V1_i_reg_149;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
reg   [23:0] axi_data_V_3_i_reg_262;
reg   [23:0] axi_data_V1_i_reg_159;
reg   [15:0] i_i_reg_169;
reg   [0:0] ap_phi_mux_eol_phi_fu_183_p4;
reg   [23:0] ap_phi_mux_axi_data_V_1_i_phi_fu_194_p4;
reg   [0:0] ap_phi_mux_eol_i_phi_fu_206_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_225;
reg   [23:0] ap_phi_mux_p_Val2_s_phi_fu_242_p4;
wire   [23:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_238;
wire    ap_CS_fsm_state8;
reg   [0:0] eol_2_i_reg_274;
reg    grp_reg_unsigned_short_s_fu_294_ap_start_reg;
reg    ap_block_state1_ignore_call7;
reg    grp_reg_unsigned_short_s_fu_300_ap_start_reg;
reg    ap_block_state1_ignore_call8;
reg    srcLayer0_V_val_0_V1_update;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_i_fu_96;
wire   [0:0] tmp_user_V_fu_306_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_688;
reg    ap_condition_591;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 s_axis_video_V_data_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_data_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_data_V_0_state = 2'd0;
#0 s_axis_video_V_user_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_user_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_user_V_0_state = 2'd0;
#0 s_axis_video_V_last_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_last_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_last_V_0_state = 2'd0;
#0 s_axis_video_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_294_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_300_ap_start_reg = 1'b0;
end

system_v_mix_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_294(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_294_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_294_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_294_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_294_ap_ready),
    .in_r(HwReg_height),
    .ap_return(grp_reg_unsigned_short_s_fu_294_ap_return)
);

system_v_mix_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_300(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_300_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_300_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_300_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_300_ap_ready),
    .in_r(HwReg_width),
    .ap_return(grp_reg_unsigned_short_s_fu_300_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & ((exitcond7_i_fu_315_p2 == 1'd1) | (p_read_1_read_fu_112_p2 == 1'd0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((p_read_1_read_fu_112_p2 == 1'd1) & (exitcond7_i_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((p_read_1_read_fu_112_p2 == 1'd1) & (exitcond7_i_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_294_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_294_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_294_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_294_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_300_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_300_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_300_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_300_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_out == 1'b1) & (s_axis_video_V_data_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_rd <= ~s_axis_video_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_in == 1'b1) & (s_axis_video_V_data_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_wr <= ~s_axis_video_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)) & (s_axis_video_V_data_V_0_state == 2'd3)) | ((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) | ((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)) & (s_axis_video_V_dest_V_0_state == 2'd3)) | ((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) | ((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_out == 1'b1) & (s_axis_video_V_last_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_rd <= ~s_axis_video_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_in == 1'b1) & (s_axis_video_V_last_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_wr <= ~s_axis_video_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)) & (s_axis_video_V_last_V_0_state == 2'd3)) | ((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) | ((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_out == 1'b1) & (s_axis_video_V_user_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_rd <= ~s_axis_video_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_in == 1'b1) & (s_axis_video_V_user_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_wr <= ~s_axis_video_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)) & (s_axis_video_V_user_V_0_state == 2'd3)) | ((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) | ((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_data_V1_i_reg_159 <= tmp_data_V_reg_399;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V1_i_reg_159 <= axi_data_V_3_i_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_1_i_reg_191 <= p_Val2_s_reg_238;
    end else if (((p_read_1_read_fu_112_p2 == 1'd1) & (exitcond7_i_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        axi_data_V_1_i_reg_191 <= axi_data_V1_i_reg_159;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_3_i_reg_262 <= axi_data_V_1_i_reg_191;
    end else if ((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_data_V_3_i_reg_262 <= s_axis_video_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_last_V1_i_reg_149 <= tmp_last_V_reg_407;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V1_i_reg_149 <= axi_last_V_3_i_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_591)) begin
        if (((brmerge_i_fu_340_p2 == 1'd1) & (exitcond8_i_fu_326_p2 == 1'd0))) begin
            axi_last_V_2_i_reg_225 <= ap_phi_mux_eol_phi_fu_183_p4;
        end else if (((brmerge_i_fu_340_p2 == 1'd0) & (exitcond8_i_fu_326_p2 == 1'd0))) begin
            axi_last_V_2_i_reg_225 <= s_axis_video_V_last_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_2_i_reg_225 <= ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_225;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_3_i_reg_250 <= eol_reg_180;
    end else if ((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_last_V_3_i_reg_250 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_2_i_reg_274 <= eol_i_reg_202;
    end else if ((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        eol_2_i_reg_274 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_i_reg_202 <= axi_last_V_2_i_reg_225;
    end else if (((p_read_1_read_fu_112_p2 == 1'd1) & (exitcond7_i_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_i_reg_202 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_180 <= axi_last_V_2_i_reg_225;
    end else if (((p_read_1_read_fu_112_p2 == 1'd1) & (exitcond7_i_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_reg_180 <= axi_last_V1_i_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_reg_169 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_i_reg_169 <= i_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_i_fu_326_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_i_reg_214 <= j_fu_331_p2;
    end else if (((p_read_1_read_fu_112_p2 == 1'd1) & (exitcond7_i_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_i_reg_214 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_591)) begin
        if (((brmerge_i_fu_340_p2 == 1'd1) & (exitcond8_i_fu_326_p2 == 1'd0))) begin
            p_Val2_s_reg_238 <= ap_phi_mux_axi_data_V_1_i_phi_fu_194_p4;
        end else if (((brmerge_i_fu_340_p2 == 1'd0) & (exitcond8_i_fu_326_p2 == 1'd0))) begin
            p_Val2_s_reg_238 <= s_axis_video_V_data_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_238 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_238;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_i_fu_326_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_i_fu_96 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_1_i_fu_96 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond8_i_reg_428 <= exitcond8_i_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((p_read_1_read_fu_112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_423 <= i_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_A == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_B == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_A == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_B == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_A == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_B == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_reg_399 <= s_axis_video_V_data_V_0_data_out;
        tmp_last_V_reg_407 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_i_114_reg_394 <= grp_reg_unsigned_short_s_fu_300_ap_return;
        tmp_i_reg_389 <= grp_reg_unsigned_short_s_fu_294_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_i_fu_326_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_val_0_V_reg_441 <= {{ap_phi_mux_p_Val2_s_phi_fu_242_p4[23:16]}};
        tmp_val_1_V_reg_446 <= tmp_val_1_V_fu_356_p1;
        tmp_val_2_V_reg_451 <= {{ap_phi_mux_p_Val2_s_phi_fu_242_p4[15:8]}};
    end
end

always @ (*) begin
    if ((exitcond8_i_fu_326_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((exitcond7_i_fu_315_p2 == 1'd1) | (p_read_1_read_fu_112_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_1_i_phi_fu_194_p4 = p_Val2_s_reg_238;
    end else begin
        ap_phi_mux_axi_data_V_1_i_phi_fu_194_p4 = axi_data_V_1_i_reg_191;
    end
end

always @ (*) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_i_phi_fu_206_p4 = axi_last_V_2_i_reg_225;
    end else begin
        ap_phi_mux_eol_i_phi_fu_206_p4 = eol_i_reg_202;
    end
end

always @ (*) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_183_p4 = axi_last_V_2_i_reg_225;
    end else begin
        ap_phi_mux_eol_phi_fu_183_p4 = eol_reg_180;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_688)) begin
        if ((brmerge_i_fu_340_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_242_p4 = ap_phi_mux_axi_data_V_1_i_phi_fu_194_p4;
        end else if ((brmerge_i_fu_340_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_242_p4 = s_axis_video_V_data_V_0_data_out;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_242_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_238;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_242_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_238;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((exitcond7_i_fu_315_p2 == 1'd1) | (p_read_1_read_fu_112_p2 == 1'd0)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((brmerge_i_fu_340_p2 == 1'd0) & (exitcond8_i_fu_326_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_V_data_V_0_state[1'd0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op60_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_data_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_data_V_0_sel == 1'b1)) begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_B;
    end else begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op60_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_dest_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op60_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_last_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_last_V_0_sel == 1'b1)) begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_B;
    end else begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op60_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_user_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_user_V_0_sel == 1'b1)) begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_B;
    end else begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        srcLayer0_V_val_0_V1_update = 1'b1;
    end else begin
        srcLayer0_V_val_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        srcLayer0_V_val_0_V_blk_n = srcLayer0_V_val_0_V_full_n;
    end else begin
        srcLayer0_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        srcLayer0_V_val_1_V_blk_n = srcLayer0_V_val_1_V_full_n;
    end else begin
        srcLayer0_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond8_i_reg_428 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        srcLayer0_V_val_2_V_blk_n = srcLayer0_V_val_2_V_full_n;
    end else begin
        srcLayer0_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((p_read_1_read_fu_112_p2 == 1'd1) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((p_read_1_read_fu_112_p2 == 1'd0) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_user_V_fu_306_p1 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((tmp_user_V_fu_306_p1 == 1'd1) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((exitcond7_i_fu_315_p2 == 1'd1) | (p_read_1_read_fu_112_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((exitcond8_i_fu_326_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((exitcond8_i_fu_326_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_reg_274 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (ap_phi_mux_eol_2_i_phi_fu_277_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((exitcond8_i_reg_428 == 1'd0) & (srcLayer0_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op60_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((exitcond8_i_reg_428 == 1'd0) & (srcLayer0_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op60_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((exitcond8_i_reg_428 == 1'd0) & (srcLayer0_V_val_0_V1_status == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op60_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call7 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call8 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_300_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_294_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op60_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((exitcond8_i_reg_428 == 1'd0) & (srcLayer0_V_val_0_V1_status == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((eol_2_i_reg_274 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_condition_591 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_688 = ((exitcond8_i_fu_326_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_i_phi_fu_277_p4 = eol_2_i_reg_274;

assign ap_phi_reg_pp1_iter0_axi_last_V_2_i_reg_225 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_238 = 'bx;

always @ (*) begin
    ap_predicate_op60_read_state6 = ((brmerge_i_fu_340_p2 == 1'd0) & (exitcond8_i_fu_326_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign brmerge_i_fu_340_p2 = (sof_1_i_fu_96 | ap_phi_mux_eol_i_phi_fu_206_p4);

assign exitcond7_i_fu_315_p2 = ((i_i_reg_169 == tmp_i_reg_389) ? 1'b1 : 1'b0);

assign exitcond8_i_fu_326_p2 = ((j_i_reg_214 == tmp_i_114_reg_394) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_294_ap_start = grp_reg_unsigned_short_s_fu_294_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_300_ap_start = grp_reg_unsigned_short_s_fu_300_ap_start_reg;

assign i_fu_320_p2 = (i_i_reg_169 + 16'd1);

assign j_fu_331_p2 = (j_i_reg_214 + 16'd1);

assign p_read_1_read_fu_112_p2 = p_read;

assign s_axis_video_TREADY = s_axis_video_V_dest_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_ack_in = s_axis_video_V_data_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_load_A = (s_axis_video_V_data_V_0_state_cmp_full & ~s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_load_B = (s_axis_video_V_data_V_0_state_cmp_full & s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_sel = s_axis_video_V_data_V_0_sel_rd;

assign s_axis_video_V_data_V_0_state_cmp_full = ((s_axis_video_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_data_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_data_V_0_vld_out = s_axis_video_V_data_V_0_state[1'd0];

assign s_axis_video_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_ack_in = s_axis_video_V_last_V_0_state[1'd1];

assign s_axis_video_V_last_V_0_load_A = (s_axis_video_V_last_V_0_state_cmp_full & ~s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_load_B = (s_axis_video_V_last_V_0_state_cmp_full & s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_sel = s_axis_video_V_last_V_0_sel_rd;

assign s_axis_video_V_last_V_0_state_cmp_full = ((s_axis_video_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_last_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_vld_out = s_axis_video_V_last_V_0_state[1'd0];

assign s_axis_video_V_user_V_0_ack_in = s_axis_video_V_user_V_0_state[1'd1];

assign s_axis_video_V_user_V_0_load_A = (s_axis_video_V_user_V_0_state_cmp_full & ~s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_load_B = (s_axis_video_V_user_V_0_state_cmp_full & s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_sel = s_axis_video_V_user_V_0_sel_rd;

assign s_axis_video_V_user_V_0_state_cmp_full = ((s_axis_video_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_user_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_user_V_0_vld_out = s_axis_video_V_user_V_0_state[1'd0];

assign srcLayer0_V_val_0_V1_status = (srcLayer0_V_val_2_V_full_n & srcLayer0_V_val_1_V_full_n & srcLayer0_V_val_0_V_full_n);

assign srcLayer0_V_val_0_V_din = tmp_val_0_V_reg_441;

assign srcLayer0_V_val_0_V_write = srcLayer0_V_val_0_V1_update;

assign srcLayer0_V_val_1_V_din = tmp_val_1_V_reg_446;

assign srcLayer0_V_val_1_V_write = srcLayer0_V_val_0_V1_update;

assign srcLayer0_V_val_2_V_din = tmp_val_2_V_reg_451;

assign srcLayer0_V_val_2_V_write = srcLayer0_V_val_0_V1_update;

assign start_out = real_start;

assign tmp_user_V_fu_306_p1 = s_axis_video_V_user_V_0_data_out;

assign tmp_val_1_V_fu_356_p1 = ap_phi_mux_p_Val2_s_phi_fu_242_p4[7:0];

endmodule //system_v_mix_0_0_AXIvideo2MultiPixStr
